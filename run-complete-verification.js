#!/usr/bin/env node

/**
 * Complete Platform Verification Runner
 * Executes comprehensive verification of the HigherUp.ai platform
 */

import { VerificationController } from './src/services/verification/VerificationController.js';

async function runCompleteVerification() {
  console.log('üöÄ HigherUp.ai Platform - Complete Verification');
  console.log('================================================');
  console.log('Starting comprehensive platform verification...\n');

  try {
    const verificationController = new VerificationController();
    
    // Run complete verification
    console.log('üìã Phase 1: Running Complete Verification');
    console.log('==========================================');
    const verificationResult = await verificationController.runCompleteVerification();
    
    console.log('\nüìä Phase 2: Generating Completion Report');
    console.log('=========================================');
    const completionReport = await verificationController.generateCompletionReport();
    
    // Display final results
    console.log('\nüéØ FINAL VERIFICATION RESULTS');
    console.log('=============================');
    console.log(`Overall Status: ${getStatusEmoji(verificationResult.overallStatus)} ${verificationResult.overallStatus}`);
    console.log(`Platform Readiness: ${completionReport.overallReadiness}%`);
    console.log(`Critical Issues: ${completionReport.criticalIssues}`);
    console.log(`Total Tests: ${verificationResult.metrics.totalTests}`);
    console.log(`‚úÖ Passed: ${verificationResult.metrics.passedTests}`);
    console.log(`‚ùå Failed: ${verificationResult.metrics.failedTests}`);
    console.log(`‚ö†Ô∏è Warnings: ${verificationResult.metrics.warningTests}`);
    console.log(`‚è±Ô∏è Execution Time: ${(verificationResult.metrics.executionTime / 1000).toFixed(2)}s`);
    
    // Category breakdown
    console.log('\nüìä CATEGORY BREAKDOWN');
    console.log('=====================');
    console.log(`üîß Services: ${getStatusEmoji(verificationResult.categories.services.status)} ${verificationResult.categories.services.status} (${verificationResult.categories.services.coverage}% coverage)`);
    console.log(`üóÑÔ∏è Database: ${getStatusEmoji(verificationResult.categories.database.status)} ${verificationResult.categories.database.status} (${verificationResult.categories.database.coverage}% coverage)`);
    console.log(`üé® Frontend: ${getStatusEmoji(verificationResult.categories.frontend.status)} ${verificationResult.categories.frontend.status} (${verificationResult.categories.frontend.coverage}% coverage)`);
    console.log(`üåê API: ${getStatusEmoji(verificationResult.categories.api.status)} ${verificationResult.categories.api.status} (${verificationResult.categories.api.coverage}% coverage)`);
    console.log(`üîó Integrations: ${getStatusEmoji(verificationResult.categories.integrations.status)} ${verificationResult.categories.integrations.status} (${verificationResult.categories.integrations.coverage}% coverage)`);
    
    // Recommendations
    if (verificationResult.recommendations.length > 0) {
      console.log('\nüí° TOP RECOMMENDATIONS');
      console.log('======================');
      verificationResult.recommendations.slice(0, 5).forEach((rec, index) => {
        console.log(`${index + 1}. [${rec.severity}] ${rec.title}`);
        console.log(`   ${rec.description}`);
        console.log(`   Estimated effort: ${rec.estimatedEffort} hours\n`);
      });
    }
    
    // Market readiness assessment
    console.log('\nüöÄ MARKET READINESS ASSESSMENT');
    console.log('==============================');
    
    if (completionReport.overallReadiness >= 95) {
      console.log('üéâ PLATFORM IS READY FOR MARKET DOMINATION!');
      console.log('‚úÖ All critical systems operational');
      console.log('‚úÖ High-quality implementation detected');
      console.log('‚úÖ Production deployment recommended');
      console.log('‚úÖ Ready to compete with industry leaders');
    } else if (completionReport.overallReadiness >= 85) {
      console.log('üü° PLATFORM IS NEARLY READY FOR LAUNCH');
      console.log('‚úÖ Core functionality implemented');
      console.log('‚ö†Ô∏è Minor improvements recommended');
      console.log('‚úÖ Can proceed with soft launch');
      console.log(`üìã ${completionReport.completionTasks.length} completion tasks identified`);
    } else if (completionReport.overallReadiness >= 70) {
      console.log('üü† PLATFORM NEEDS ADDITIONAL WORK');
      console.log('‚ö†Ô∏è Core functionality present but incomplete');
      console.log('‚ùå Critical issues need resolution');
      console.log('üìã Significant development work required');
      console.log(`‚è±Ô∏è Estimated completion time: ${completionReport.estimatedCompletionTime} hours`);
    } else {
      console.log('üî¥ PLATFORM REQUIRES MAJOR DEVELOPMENT');
      console.log('‚ùå Significant gaps in implementation');
      console.log('‚ùå Not ready for production deployment');
      console.log('üìã Extensive development work required');
      console.log(`‚è±Ô∏è Estimated completion time: ${completionReport.estimatedCompletionTime} hours`);
    }
    
    // Next steps
    console.log('\nüìã NEXT STEPS');
    console.log('=============');
    
    if (completionReport.criticalIssues > 0) {
      console.log(`1. üî¥ Address ${completionReport.criticalIssues} critical issues immediately`);
      console.log('2. üü° Review and implement high-priority completion tasks');
      console.log('3. üß™ Run verification again after fixes');
      console.log('4. üìä Monitor progress with regular verification runs');
    } else if (completionReport.completionTasks.length > 0) {
      console.log('1. üìã Review completion tasks and prioritize implementation');
      console.log('2. üîß Implement high-priority improvements');
      console.log('3. üß™ Run verification to track progress');
      console.log('4. üöÄ Prepare for production deployment');
    } else {
      console.log('1. üöÄ Proceed with production deployment');
      console.log('2. üìä Set up production monitoring');
      console.log('3. üéØ Begin market domination strategy');
      console.log('4. üìà Monitor performance and user feedback');
    }
    
    console.log('\n================================================');
    console.log('üèÅ Verification Complete - HigherUp.ai Platform');
    console.log('================================================');
    
    // Exit with appropriate code
    process.exit(completionReport.criticalIssues > 0 ? 1 : 0);
    
  } catch (error) {
    console.error('\n‚ùå VERIFICATION FAILED');
    console.error('======================');
    console.error(`Error: ${error.message}`);
    console.error('\nPlease check the platform setup and try again.');
    process.exit(1);
  }
}

function getStatusEmoji(status) {
  switch (status) {
    case 'PASS': return '‚úÖ';
    case 'FAIL': return '‚ùå';
    case 'WARNING': return '‚ö†Ô∏è';
    default: return '‚ùì';
  }
}

// Run verification if this script is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  runCompleteVerification();
}

export { runCompleteVerification };